var searchIndex = JSON.parse('{\
"halo2":{"doc":"halo2","t":[0,0,0,0,0,0,16,16,16,8,18,3,8,8,16,18,8,8,8,8,18,18,18,18,18,16,16,16,3,18,18,18,10,10,10,10,10,11,5,5,11,11,11,11,11,11,5,11,10,10,11,11,11,11,11,11,11,10,10,11,11,10,5,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,10,10,10,10,10,10,10,5,5,11,10,10,10,5,11,11,11,11,11,10,10,11,11,5,10,10,11,11,10,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,3,8,16,8,16,3,3,3,3,16,3,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,10,11,10,11,10,11,10,11,11,11,11,11,11,10,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,13,4,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,4,8,13,8,3,8,16,13,3,3,13,4,4,3,13,13,8,16,13,3,13,13,13,13,13,13,3,3,13,3,13,13,3,13,13,13,13,3,3,13,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,12,12,12,12,12,12,12,8,3,4,3,3,3,13,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,11,11,3,3,3,3,8,16,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11],"n":["arithmetic","circuit","dev","plonk","poly","transcript","AffineExt","Base","Base","BatchInvert","CURVE_ID","Coordinates","CurveAffine","CurveExt","CurveExt","DELTA","Field","Field","FieldExt","Group","MODULUS","RESCUE_ALPHA","RESCUE_INVALPHA","ROOT_OF_UNITY","ROOT_OF_UNITY_INV","Scalar","ScalarExt","ScalarExt","SqrtTables","TWO_INV","T_MINUS1_OVER2","ZETA","a","a","b","b","batch_invert","batch_invert","best_fft","best_multiexp","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_inner_product","conditional_select","coordinates","ct_is_zero","cube","cube","default","deref","deref","deref_mut","deref_mut","double","double","drop","drop","endo","eval_polynomial","fmt","fmt","from","from","from_bytes","from_bytes_wide","from_u128","from_u64","from_xy","get_lower_128","get_lower_32","group_add","group_scale","group_sub","group_zero","hash_to_curve","init","init","into","into","invert","invert","is_on_curve","is_on_curve","is_zero","is_zero","jacobian_coordinates","kate_division","lagrange_interpolate","new","new_jacobian","one","one","parallelize","pow","pow_by_t_minus1_over2","pow_vartime","pow_vartime","rand","random","random","read","read","small_multiexp","sqrt","sqrt","sqrt_alt","sqrt_alt","sqrt_ratio","sqrt_ratio","square","square","to_bytes","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u","v","vzip","vzip","write","write","x","y","zero","zero","Cell","Chip","Config","Layouter","Loaded","NamespacedLayouter","Region","RegionIndex","RegionStart","Root","SimpleFloorPlanner","assign_advice","assign_advice_from_constant","assign_advice_from_instance","assign_fixed","assign_region","assign_region","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","config","constrain_constant","constrain_equal","constrain_instance","constrain_instance","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","floor_planner","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_root","get_root","init","init","init","init","init","init","into","into","into","into","into","into","layouter","loaded","namespace","ne","pop_namespace","pop_namespace","push_namespace","push_namespace","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","V1","V1Pass","assign_region","borrow","borrow","borrow_mut","borrow_mut","constrain_instance","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_root","init","init","into","into","pop_namespace","push_namespace","synthesize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RegionLayouter","RegionShape","assign_advice","assign_advice","assign_advice_from_constant","assign_advice_from_constant","assign_advice_from_instance","assign_advice_from_instance","assign_fixed","assign_fixed","borrow","borrow_mut","clone","clone_into","columns","constrain_constant","constrain_constant","constrain_equal","constrain_equal","deref","deref_mut","drop","enable_selector","enable_selector","fmt","from","init","into","new","region_index","row_count","to_owned","try_from","try_into","type_id","vzip","Cell","ConstraintNotSatisfied","ConstraintPoisoned","Lookup","MockProver","Permutation","VerifyFailure","assign_advice","assign_fixed","borrow","borrow","borrow_mut","borrow_mut","copy","cost","deref","deref","deref_mut","deref_mut","drop","drop","enable_selector","enter_region","eq","exit_region","fmt","fmt","fmt","from","from","init","init","into","into","metadata","ne","pop_namespace","push_namespace","query_instance","run","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","column","column","constraint","constraint","gate","lookup_index","offset","region","row","row","row","CircuitCost","ProofSize","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","measure","proof_size","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Column","Constraint","Gate","Region","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","into","into","into","into","ne","ne","ne","ne","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Advice","Advice","Advice","Any","Assigned","Assignment","BoundsFailure","Circuit","Column","ColumnType","Config","Constant","Constraint","ConstraintSystem","ConstraintSystemFailure","Error","Expression","Fixed","Fixed","Fixed","FloorPlanner","FloorPlanner","IncompatibleParams","Instance","Instance","Instance","InstanceTooLarge","NotEnoughColumnsForConstants","NotEnoughRowsAvailable","OpeningError","PinnedConstraintSystem","PinnedVerificationKey","Product","ProvingKey","Rational","Scaled","Selector","Sum","SynthesisError","TranscriptError","Trivial","VerifyingKey","VirtualCells","Zero","add","add","add","advice_column","assign_advice","assign_fixed","blinding_factors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","configure","copy","create_gate","create_proof","default","degree","degree","denominator","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","enable_constant","enable_equality","enable_selector","enter_region","eq","eq","eq","eq","eq","eq","eq","evaluate","evaluate","exit_region","fixed_column","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_domain","get_vk","hash","hash","hash","hash","hash","hash","hash_into","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","instance_column","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invert","keygen_pk","keygen_vk","lookup","minimum_rows","mul","mul","mul","mul","ne","ne","neg","neg","numerator","partial_cmp","pinned","pinned","pop_namespace","push_namespace","query_advice","query_any","query_fixed","query_instance","query_instance","query_selector","read","selector","set_minimum_degree","square","sub","sub","sub","synthesize","synthesize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_proof","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","without_witnesses","write","column_index","column_index","column_index","query_index","query_index","query_index","rotation","rotation","rotation","0","Basis","Coeff","Error","EvaluationDomain","ExtendedLagrangeCoeff","LagrangeCoeff","OpeningError","PinnedEvaluationDomain","Polynomial","Rotation","SamplingError","add","add_extended","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","coeff_from_vec","coeff_to_extended","commitment","constant_extended","constant_lagrange","cur","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","divide_by_vanishing_poly","drop","drop","drop","drop","drop","drop","drop","drop","empty_coeff","empty_extended","empty_lagrange","eq","extended_len","extended_to_coeff","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_extended_omega","get_omega","get_omega_inv","get_quotient_poly_degree","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","iter","iter_mut","l_i_range","lagrange_from_vec","lagrange_to_coeff","mul","mul","mul_extended","multiopen","ne","new","next","num_coeffs","one_minus","pinned","prev","rotate","rotate_extended","rotate_omega","sub","sub_extended","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","Accumulator","Blind","Guard","MSM","Params","add","add_assign","add_assign","add_constant_term","add_msm","add_to_g_scalars","add_to_h_scalar","add_to_u_scalar","append_term","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenges_packed","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commit","commit_lagrange","compute_g","create_proof","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","empty_msm","eq","eval","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","g","get_g","init","init","init","init","init","into","into","into","into","into","mul","mul_assign","mul_assign","ne","new","new","read","scale","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","use_challenges","use_g","verify_proof","vzip","vzip","vzip","vzip","vzip","write","ProverQuery","VerifierQuery","blind","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_proof","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","new_commitment","new_msm","point","poly","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_proof","vzip","vzip","Blake2bRead","Blake2bWrite","Challenge255","ChallengeScalar","EncodedChallenge","Input","Transcript","TranscriptRead","TranscriptWrite","as_challenge_scalar","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","common_point","common_point","common_point","common_scalar","common_scalar","common_scalar","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","finalize","fmt","fmt","fmt","fmt","from","from","from","from","get_scalar","get_scalar","init","init","init","init","init","init","into","into","into","into","new","new","read_point","read_point","read_scalar","read_scalar","squeeze_challenge","squeeze_challenge","squeeze_challenge","squeeze_challenge_scalar","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_point","write_point","write_scalar","write_scalar"],"q":["halo2","","","","","","halo2::arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit::floor_planner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit::layouter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::dev","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::dev::VerifyFailure","","","","","","","","","","","halo2::dev::cost","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::dev::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::plonkhalo2::plonk::Expression","","","","","","","","","halo2::polyhalo2::poly::commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::poly::multiopen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::transcript","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module provides common utilities, traits and …","Traits and structs for implementing circuit components.","Tools for developing circuits.","This module provides an implementation of a variant of …","Contains utilities for performing arithmetic over …","This module contains utilities and traits for dealing …","The affine version of the curve","The base field over which this elliptic curve is …","The base field over which this elliptic curve is …","Extension trait for iterators over mutable field elements …","CURVE_ID used for hash-to-curve.","The affine coordinates of a point on an elliptic curve.","This trait is the affine counterpart to <code>Curve</code> and is used …","This trait is a common interface for dealing with …","The projective form of the curve","Generator of the $t-order$ multiplicative subgroup","This trait represents an element of a field.","This trait represents an element of a field.","This trait is a common interface for dealing with …","This represents an element of a group with basic …","Modulus of the field written as a string for display …","Ideally the smallest prime $\\\\alpha$ such that gcd($p - …","$RESCUE_INVALPHA \\\\cdot RESCUE_ALPHA = 1 \\\\mod p - 1$ such …","Generator of the $2^S$ multiplicative subgroup","Inverse of <code>ROOT_OF_UNITY</code>","The group is assumed to be of prime order $p$. <code>Scalar</code> is …","The scalar field of this elliptic curve.","The scalar field of this elliptic curve.","Tables used for square root computation.","Inverse of $2$ in the field.","The value $(T-1)/2$ such that $2^S \\\\cdot T = p - 1$ with …","Element of multiplicative order $3$.","Returns the curve constant a.","Returns the curve constant $a$.","Returns the curve constant b.","Returns the curve constant $b$.","Consume this iterator and invert each field element (when …","Performs a batch inversion using Montgomery’s trick, …","Performs a radix-$2$ Fast-Fourier Transformation (FFT) on …","Performs a multi-exponentiation operation.","","","","","","","This computes the inner product of two vectors <code>a</code> and <code>b</code>.","","Gets the coordinates of this point.","Returns whether or not this element is zero.","Cubes this element.","Cubes this element.","","","","","","Doubles this element.","Doubles this element.","","","Apply the curve endomorphism by multiplying the …","This evaluates a provided polynomial (in coefficient …","","","","","Attempts to obtain a field element from its normalized, …","Obtains a field element that is congruent to the provided …","Obtains a field element congruent to the integer <code>v</code>.","Obtains a field element congruent to the integer <code>v</code>.","Obtains a point given $(x, y)$, failing if it is not on …","Gets the lower 128 bits of this field element when …","Gets the lower 32 bits of this field element when …","Adds <code>rhs</code> to this group element.","Scales this group element by a scalar.","Subtracts <code>rhs</code> from this group element.","Returns the additive identity of the group.","Requests a hasher that accepts messages and returns …","","","","","Computes the multiplicative inverse of this element, …","Computes the multiplicative inverse of this element, …","Returns whether or not this element is on the curve; …","Returns whether or not this element is on the curve; …","Returns true iff this element is zero.","Returns true iff this element is zero.","Return the Jacobian coordinates of this point.","Divides polynomial <code>a</code> in <code>X</code> by <code>X - b</code> with no remainder.","Returns coefficients of an n - 1 degree polynomial given …","Build tables given parameters for the perfect hash.","Obtains a point given Jacobian coordinates $X : Y : Z$, …","Returns the one element of the field, the multiplicative …","Returns the one element of the field, the multiplicative …","This simple utility function will parallelize an …","Exponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian …","Raise this field element to the power T_MINUS1_OVER2. …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","This computes a random element of the field using system …","Returns an element chosen uniformly at random using a …","Returns an element chosen uniformly at random using a …","Reads a compressed element from the buffer and attempts …","Reads a normalized, little endian represented field …","Performs a small multi-exponentiation operation. Uses the …","Returns the square root of the field element, if it is …","Returns the square root of the field element, if it is …","Equivalent to sqrt_ratio(self, one()).","Same as sqrt_ratio(u, one()) but more efficient.","Computes:","Computes:","Squares this element.","Squares this element.","Converts this field element to its normalized, little …","","","","","","","","Returns the u-coordinate.","Returns the v-coordinate.","","","Writes an element in compressed form to the buffer.","Writes this element in its normalized, little endian form …","Returns the x-coordinate.","Returns the y-coordinate.","Returns the zero element of the field, the additive …","Returns the zero element of the field, the additive …","A pointer to a cell within a circuit.","A chip implements a set of instructions that can be used …","A type that holds the configuration for this chip, and …","A layout strategy within a circuit. The layouter is …","A type that holds any general chip state that needs to be …","This is a “namespaced” layouter which borrows a …","A region of the circuit in which a <code>Chip</code> can assign cells.","Index of a region in a layouter","Starting row of a region in a layouter","Represents the type of the “root” of this layouter, …","A simple <code>FloorPlanner</code> that performs minimal optimizations.","Assign an advice column value (witness).","Assigns a constant value to the column <code>advice</code> at <code>offset</code> …","Assign the value of the instance column’s cell at …","Assign a fixed value.","Assign a region of gates to an absolute row number.","","","","","","","","","","","","","","","","","","","","The chip holds its own configuration.","Constrains a cell to have a constant value.","Constrains two cells to have the same value.","Constrains a <code>Cell</code> to equal an instance column’s row …","","","","","","","","","","","","","","","","","","","","","","","","Implementations of common circuit floor planners.","","","","","","","","","","","","","","","","Gets the “root” of this assignment, bypassing the …","","","","","","","","","","","","","","Implementations of common circuit layouters.","Provides access to general chip state loaded at the …","Enters into a namespace.","","Exits out of the existing namespace.","","Creates a new (sub)namespace and enters into it.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The version 1 <code>FloorPlanner</code> provided by <code>halo2</code>.","A single pass of the <code>V1</code> layouter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper trait for implementing a custom <code>Layouter</code>.","The shape of a region. For a region at a certain index, …","Assign an advice column value (witness)","","Assigns a constant value to the column <code>advice</code> at <code>offset</code> …","","Assign the value of the instance column’s cell at …","","Assign a fixed value","","","","","","Get a reference to the set of <code>columns</code> used in a …","Constrains a cell to have a constant value.","","Constraint two cells to have the same value.","","","","","Enables a selector at the given offset.","","","","","","Create a new <code>RegionShape</code> for a region at <code>region_index</code>.","Get the <code>region_index</code> of a <code>RegionShape</code>.","Get the <code>row_count</code> of a <code>RegionShape</code>.","","","","","","A cell used in an active gate was not assigned to.","A constraint was not satisfied for a particular row.","A constraint was active on an unusable row, and is likely …","A lookup input did not exist in its corresponding table.","A test prover for debugging circuits.","A permutation did not preserve the original value of a …","The reasons why a particular circuit is not satisfied.","","","","","","","","Developer tools for investigating the cost of a circuit.","","","","","","","","","","","","","","","","","","","","Metadata about circuits.","","","","","Runs a synthetic keygen-and-prove operation on the given …","","","","","","","","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","","","The column in which this cell should be assigned.","The column in which this permutation is not satisfied.","The polynomial constraint that is not satisfied.","The polynomial constraint that is not satisfied.","The index of the active gate.","The index of the lookup that is not satisfied. These …","The offset (relative to the start of the region) at which …","The region in which this cell should be assigned.","The row on which this constraint is not satisfied.","The row on which this lookup is not satisfied.","The row on which this permutation is not satisfied.","Measures a circuit to determine its costs, and explain …","The size of a Halo 2 proof, broken down into its …","","","","","","","","","","","","","","","","","","","Measures a circuit with parameter constant <code>k</code>.","Returns the proof size for the given number of instances …","","","","","","","","","Metadata about a column within a circuit.","Metadata about a configured constraint within a circuit.","Metadata about a configured gate within a circuit.","Metadata about an assigned region within a circuit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An advice column","An Advice variant","This is an advice (witness) column queried at a certain …","An enum over the Advice, Fixed, Instance structs","A value assigned to a cell within a circuit.","This trait allows a <code>Circuit</code> to direct some backend to …","Out of bounds index passed to a backend","This is a trait that circuits provide implementations for …","A column with an index and type","A column type","This is a configuration object that stores things like …","This is a constant polynomial","An individual polynomial constraint.","This is a description of the circuit environment, such as …","The constraint system is not satisfied.","This is an error that could occur during proving or …","Low-degree expression representing an identity that must …","A fixed column","A Fixed variant","This is a fixed column queried at a certain relative …","A floor planning strategy for a circuit.","The floor planner used for this circuit. This is an …","The structured reference string or the parameters are not …","An instance column","An Instance variant","This is an instance (external) column queried at a …","Instance provided exceeds number of available rows","Circuit synthesis requires global constants, but circuit …","Instance provided has more rows than supported by circuit","Opening error","Represents the minimal parameters that determine a …","Minimal representation of a verification key that can be …","This is the product of two polynomials","This is a proving key which allows for the creation of …","A value stored as a fraction to enable batch inversion.","This is a scaled polynomial","A selector, representing a fixed boolean value per row of …","This is the sum of two polynomials","This is an error that can occur during synthesis of the …","Transcript error","A value that does not require inversion to evaluate.","This is a verifying key which allows for the verification …","Exposes the “virtual cells” that can be queried while …","The field element zero.","","","","Allocate a new advice column","Assign an advice column value (witness)","Assign a fixed value","Compute the number of blinding factors necessary to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The circuit is given an opportunity to describe the exact …","Assign two cells to have the same value","Creates a new gate.","This creates a proof for the provided <code>circuit</code> when given …","","Compute the degree of this polynomial","Compute the degree of the constraint system (the maximum …","Returns the denominator, if non-trivial.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable this selector at the given offset within the given …","Enables this fixed column to be used for global constant …","Enable the ability to enforce equality over cells in this …","Enables a selector at the given row.","Creates a new region and enters into it.","","","","","","","","Evaluates this assigned value directly, performing an …","Evaluate the polynomial using the provided closures to …","Exits the current region.","Allocate a new fixed column","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the underlying <code>EvaluationDomain</code>.","Get the underlying <code>VerifyingKey</code>.","","","","","","","Hashes a verification key into a transcript.","","","","","","","","","","","","","","","","","Allocate a new instance column","","","","","","","","","","","","","","","","","Inverts this assigned value.","Generate a <code>ProvingKey</code> from a <code>VerifyingKey</code> and an instance …","Generate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>.","Add a lookup argument for some input expressions and …","Returns the minimum necessary rows that need to exist in …","","","","","","","","","Returns the numerator.","","Obtain a pinned version of this constraint system; a …","Obtains a pinned representation of this verification key …","Exits out of the existing namespace.","Creates a new (sub)namespace and enters into it.","Query an advice column at a relative position","Query an Any column at a relative position","Query a fixed column at a relative position","Queries the cell of an instance column at a particular …","Query an instance column at a relative position","Query a selector at the current position.","Reads a verification key from a buffer.","Allocate a new selector.","Sets the minimum degree required by the circuit, which …","Square this expression.","","","","Given the provided <code>cs</code>, synthesize the given circuit.","Given the provided <code>cs</code>, synthesize the circuit. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boolean indicating whether or not the proof is …","","","","","","","","","","","","","","","","","Returns a copy of this circuit with no witness values …","Writes a verifying key to a buffer.","Column index","Column index","Column index","Query index","Query index","Query index","Rotation of this query","Rotation of this query","Rotation of this query","","The basis over which a polynomial is described.","The polynomial is defined as coefficients","This is an error that could occur during proving or …","This structure contains precomputed constants and other …","The polynomial is defined as coefficients of Lagrange …","The polynomial is defined as coefficients of Lagrange …","OpeningProof is not well-formed","Represents the minimal parameters that determine an …","Represents a univariate polynomial defined over a field …","Describes the relative rotation of a vector. Negative …","Caller needs to re-sample a point","","Add two polynomials in the extended domain, rotating the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtains a polynomial in coefficient form when given a …","This takes us from an n-length coefficient vector into a …","This module contains an implementation of the polynomial …","Returns a constant polynomial in the extended Lagrange …","Returns a constant polynomial in the Lagrange coefficient …","The current location in the evaluation domain","","","","","","","","","","","","","","","","","","","","This divides the polynomial (in the extended domain) by …","","","","","","","","","Returns an empty (zero) polynomial in the coefficient …","Returns an empty (zero) polynomial in the extended …","Returns an empty (zero) polynomial in the Lagrange …","","Get the size of the extended domain","This takes us from the extended evaluation domain and …","","","","","","","","","","","","","","","","","Get the generator of the extended domain’s …","Get $\\\\omega$, the generator of the $2^k$ order …","Get $\\\\omega^{-1}$, the inverse of the generator of the …","Gets the quotient polynomial’s degree (as a multiple of …","","","","","","","","","","","","","","","","","","","","","","","Iterate over the values, which are either in coefficient …","Iterate over the values mutably, which are either in …","Computes evaluations (at the point <code>x</code>, where <code>xn = x^n</code>) of …","Obtains a polynomial in Lagrange form when given a vector …","This takes us from an n-length vector into the …","","","Multiply two polynomials in the extended domain, rotating …","This module contains an optimisation of the polynomial …","","This constructs a new evaluation domain object based on …","The next location in the evaluation domain","Gets the size of this polynomial in terms of the number of…","Maps every coefficient <code>c</code> in <code>p</code> to <code>1 - c</code>.","Obtain a pinned version of this evaluation domain; a …","The previous location in the evaluation domain","Rotates the values in a Lagrange basis polynomial by …","Rotate the extended domain polynomial over the original …","Multiplies a value by some power of $\\\\omega$, essentially …","","Subtract a polynomial from another in the extended …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An accumulator instance consisting of an evaluation claim …","Wrapper type around a blinding factor.","A guard returned by the verifier","A multiscalar multiplication in the polynomial commitment …","These are the public parameters for the polynomial …","","","","Add a value to the first entry of <code>g_scalars</code>.","Add another multiexp into this one","Add a vector of scalars to <code>g_scalars</code>. This function will …","Add to <code>h_scalar</code>","Add to <code>u_scalar</code>","Add arbitrary term (the scalar and the point)","","","","","","","","","","","A vector of 128-bit challenges sampled by the verifier, …","","","","","","","","","This computes a commitment to a polynomial described by …","This commits to a polynomial using its evaluations over …","Computes G + H, where G = ⟨s, params.g⟩ and H is used …","Create a polynomial commitment opening proof for the …","","","","","","","","","","","","","","","","","Generates an empty multiscalar multiplication struct …","","Perform multiexp and check that it results in zero","","","","","","","","","","","The claimed output of the linear-time polycommit opening …","Getter for g generators","","","","","","","","","","","","","","","Create a new, empty MSM using the provided parameters.","Initializes parameters for the curve, given a random …","Reads params from a buffer.","Scale all scalars in the MSM by some scaling factor","","","","","","","","","","","","","","","","","","","","Lets caller supply the challenges and obtain an MSM with …","Lets caller supply the purported G point and simply …","Checks to see if the proof represented within <code>transcript</code> …","","","","","","Writes params to a buffer.","A polynomial query at a point","A polynomial query at a point","blinding factor of polynomial","","","","","","","","","Create a multi-opening proof","","","","","","","","","","","","","","","Create a new verifier query based on a commitment","Create a new verifier query based on a linear combination …","point at which polynomial is queried","coefficients of polynomial","","","","","","","","","Verify a multi-opening proof","","","We will replace BLAKE2b with an algebraic hash function …","We will replace BLAKE2b with an algebraic hash function …","A 255-bit challenge.","The scalar representation of a verifier challenge.","<code>EncodedChallenge<C></code> defines a challenge encoding with a …","The Input type used to derive the challenge encoding. For …","Generic transcript view (from either the prover or …","Transcript view from the perspective of a verifier that …","Transcript view from the perspective of a prover that has …","Cast an encoded challenge as a typed <code>ChallengeScalar</code>.","","","","","","","","","","","","","","","","","Writing the point to the transcript without writing it to …","","","Writing the scalar to the transcript without writing it …","","","","","","","","","","","","","","","","","Conclude the interaction and return the output buffer …","","","","","","","","","Get a scalar field element from an encoded challenge.","","Initialize a transcript given an input buffer.","","Initialize a transcript given an output buffer.","","","","","","","","Get an encoded challenge from a given input challenge.","","Read a curve point from the prover.","","Read a curve scalar from the prover.","","Squeeze an encoded verifier challenge from the transcript.","","","Squeeze a typed challenge (in the scalar field) from the …","","","","","","","","","","","","","","","","","","","","","Write a curve point to the proof and the transcript.","","Write a scalar to the proof and the transcript.",""],"i":[0,0,0,0,0,0,1,1,2,0,1,0,0,0,2,3,0,0,0,0,3,3,3,3,3,4,1,2,0,3,3,3,1,2,1,2,5,3,0,0,6,7,6,7,6,6,0,6,2,3,8,8,6,6,7,6,7,8,8,6,7,1,0,6,7,6,7,3,3,3,3,2,3,3,4,4,4,4,1,6,7,6,7,8,8,1,2,8,8,1,0,0,7,1,8,8,0,3,3,8,8,3,8,8,2,3,0,8,8,3,7,3,7,8,8,3,6,6,7,6,7,6,7,6,6,6,7,2,3,6,6,8,8,0,0,9,0,9,0,0,0,0,10,0,11,11,11,11,10,12,13,14,15,16,11,12,13,14,15,16,11,12,14,15,16,14,15,16,9,11,11,10,12,13,14,14,15,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,12,15,0,13,14,15,16,11,12,13,14,14,15,15,16,11,11,12,10,12,13,14,15,16,11,12,13,14,15,16,11,12,0,9,10,15,10,12,10,12,13,14,15,16,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,0,0,17,18,17,18,17,17,18,17,18,17,18,17,18,17,18,17,17,18,17,18,17,17,17,18,18,17,18,17,18,17,18,17,0,0,19,20,19,20,19,20,19,20,20,20,20,20,20,19,20,19,20,20,20,20,19,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,0,21,0,22,22,21,22,21,22,22,0,21,22,21,22,21,22,22,22,21,22,21,21,22,21,22,21,22,21,22,0,21,22,22,22,22,21,21,22,21,22,21,22,22,21,22,23,24,25,26,23,27,23,23,25,27,24,0,0,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,28,28,29,28,29,28,29,28,29,0,0,0,0,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,30,31,31,32,32,33,33,30,30,30,31,31,32,32,33,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,0,34,35,0,0,0,36,0,0,0,37,35,0,0,36,0,0,0,34,35,0,37,36,0,34,35,36,36,36,36,0,0,35,0,38,35,0,35,36,36,38,0,0,38,38,38,35,39,40,40,39,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,42,43,44,34,45,38,35,39,41,42,43,44,34,45,38,35,39,41,37,40,39,0,39,35,39,38,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,45,39,39,40,40,41,42,43,44,34,45,36,38,35,40,39,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,41,41,41,42,43,44,34,34,34,34,45,38,38,38,35,46,46,46,39,47,48,49,50,51,36,49,51,41,42,43,44,34,45,49,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,39,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,38,0,0,39,39,38,38,35,35,41,45,38,35,38,41,39,49,40,40,48,48,48,40,48,48,49,39,39,35,38,38,35,52,37,41,42,43,44,34,45,38,35,39,41,41,41,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,0,41,42,43,44,34,45,38,35,46,39,47,48,49,50,51,36,37,49,53,54,55,53,54,55,53,54,55,56,0,0,0,0,0,0,57,0,0,0,57,58,59,59,60,57,61,62,63,58,56,59,60,57,61,62,63,58,56,61,62,63,58,56,61,62,63,58,56,59,59,0,59,59,56,56,59,60,57,61,62,63,58,58,56,59,60,57,61,62,63,58,58,56,59,59,60,57,61,62,63,58,56,59,59,59,56,59,59,59,60,57,61,62,63,58,56,59,60,57,61,62,63,58,56,59,59,59,59,58,58,58,58,58,58,59,60,57,61,62,63,58,56,59,60,57,61,62,63,58,56,58,58,59,59,59,58,58,59,0,56,59,56,58,58,59,56,58,59,59,58,59,61,62,63,58,56,59,60,57,61,62,63,58,56,59,60,57,61,62,63,58,56,59,60,57,61,62,63,58,56,59,60,57,61,62,63,58,56,64,0,0,0,0,0,64,64,64,65,65,65,65,65,65,65,66,67,68,64,65,66,67,68,64,67,65,66,67,64,65,66,67,64,68,68,66,0,64,65,66,67,68,64,65,66,67,68,64,65,66,67,68,64,68,64,65,65,66,67,68,64,65,66,67,68,64,67,68,65,66,67,68,64,65,66,67,68,64,64,64,64,64,65,68,68,65,65,66,67,64,65,66,67,68,64,65,66,67,68,64,65,66,67,68,64,66,66,0,65,66,67,68,64,68,0,0,69,69,70,69,70,69,70,69,70,0,69,70,69,70,69,70,69,70,69,70,69,70,69,70,70,70,69,69,69,70,69,70,69,70,69,70,0,69,70,0,0,0,0,0,71,0,0,0,71,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,76,72,73,76,72,73,72,73,74,74,75,75,72,73,74,75,72,73,74,75,73,72,73,74,75,72,73,74,75,71,75,72,72,73,73,74,75,72,73,74,75,71,75,77,72,77,72,76,72,73,76,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,78,73,78,73],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[],["coordinates",3]],[[]],[[],["field",8]],[[["coordinates",3],["choice",3]],["coordinates",3]],[[],[["ctoption",3,["coordinates"]],["coordinates",3]]],[[],["choice",3]],[[]],[[]],[[],["coordinates",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["field",8]],["field",8]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["ctoption",3]],[[]],[[["u128",15]]],[[["u64",15]]],[[],["ctoption",3]],[[],["u128",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[["str",15]],[["fn",8],["global",3],["box",3,["fn","global"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["ctoption",3]],[[],["ctoption",3]],[[],["choice",3]],[[],["choice",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[["intoiterator",8],["field",8]],[["field",8],["vec",3]]],[[],[["fieldext",8],["vec",3]]],[[["usize",15],["u32",15]],["sqrttables",3]],[[],["ctoption",3]],[[]],[[]],[[["fn",8],["send",8],["clone",8],["sync",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[],["ctoption",3]],[[],["ctoption",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["column",3,["advice"]],["advice",3],["usize",15]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["column",3,["advice"]],["advice",3],["usize",15]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["usize",15],["column",3,["instance"]],["column",3,["advice"]],["advice",3],["instance",3]],[["result",4,["error"]],["error",4]]],[[["fixed",3],["usize",15],["column",3,["fixed"]]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["regionindex",3]],[[],["regionstart",3]],[[],["cell",3]],[[]],[[]],[[]],[[]],[[["cell",3]],[["result",4,["error"]],["error",4]]],[[["cell",3]],[["result",4,["error"]],["error",4]]],[[["cell",3],["usize",15],["column",3,["instance"]],["instance",3]],[["result",4,["error"]],["error",4]]],[[["cell",3],["usize",15],["column",3,["instance"]],["instance",3]],[["result",4,["error"]],["error",4]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["regionstart",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],["regionindex",3]],[[]],[[["usize",15]],["regionstart",3]],[[]],[[]],[[["regionlayouter",8]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["namespacedlayouter",3]],[[["regionstart",3]],["bool",15]],[[["option",4,["string"]],["string",3]]],[[["option",4,["string"]],["string",3]]],[[]],[[]],[[["vec",3,["column"]],["column",3,["fixed"]]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[["cell",3],["usize",15],["column",3,["instance"]],["instance",3]],[["result",4,["error"]],["error",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["option",4,["string"]],["string",3]]],[[]],[[["vec",3,["column"]],["column",3,["fixed"]]],[["result",4,["error"]],["error",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[["usize",15],["fnmut",8],["column",3,["advice"]],["advice",3],["fn",8]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["usize",15],["fnmut",8],["column",3,["advice"]],["advice",3],["fn",8]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["usize",15],["assigned",4],["column",3,["advice"]],["advice",3],["fn",8]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["usize",15],["assigned",4],["column",3,["advice"]],["advice",3],["fn",8]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["fn",8],["usize",15],["column",3,["instance"]],["column",3,["advice"]],["advice",3],["instance",3]],[["result",4,["error"]],["error",4]]],[[["fn",8],["usize",15],["column",3,["instance"]],["column",3,["advice"]],["advice",3],["instance",3]],[["result",4,["error"]],["error",4]]],[[["usize",15],["column",3,["fixed"]],["fixed",3],["fnmut",8],["fn",8]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[["usize",15],["column",3,["fixed"]],["fixed",3],["fnmut",8],["fn",8]],[["error",4],["result",4,["cell","error"]],["cell",3]]],[[]],[[]],[[],["regionshape",3]],[[]],[[],["hashset",3]],[[["assigned",4],["cell",3]],[["result",4,["error"]],["error",4]]],[[["assigned",4],["cell",3]],[["result",4,["error"]],["error",4]]],[[["cell",3]],[["result",4,["error"]],["error",4]]],[[["cell",3]],[["result",4,["error"]],["error",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["selector",3],["fn",8]],[["result",4,["error"]],["error",4]]],[[["usize",15],["selector",3],["fn",8]],[["result",4,["error"]],["error",4]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["regionindex",3]]],[[],["regionindex",3]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[["column",3,["advice"]],["advice",3],["usize",15]],[["result",4,["error"]],["error",4]]],[[["fixed",3],["usize",15],["column",3,["fixed"]]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[["usize",15],["column",3,["any"]],["any",4]],[["result",4,["error"]],["error",4]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["selector",3]],[["result",4,["error"]],["error",4]]],[[]],[[["verifyfailure",4]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["verifyfailure",4]],["bool",15]],[[["option",4,["string"]],["string",3]]],[[]],[[["column",3,["instance"]],["usize",15],["instance",3]],[["result",4,["option","error"]],["option",4],["error",4]]],[[["vec",3,["vec"]],["u32",15],["vec",3]],[["result",4,["error"]],["error",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4,["vec"]],["vec",3,["verifyfailure"]]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]],["proofsize",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["column",3]],["bool",15]],[[["gate",3]],["bool",15]],[[["constraint",3]],["bool",15]],[[["region",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["any",4],["column",3,["any"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["column",3]],["bool",15]],[[["gate",3]],["bool",15]],[[["constraint",3]],["bool",15]],[[["region",3]],["bool",15]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["assigned",4]],[[["assigned",4]],["assigned",4]],[[["expression",4]],["expression",4]],[[],[["column",3,["advice"]],["advice",3]]],[[["column",3,["advice"]],["advice",3],["usize",15]],[["result",4,["error"]],["error",4]]],[[["fixed",3],["usize",15],["column",3,["fixed"]]],[["result",4,["error"]],["error",4]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["column",3]],[[],["advice",3]],[[],["fixed",3]],[[],["instance",3]],[[],["any",4]],[[],["selector",3]],[[],["assigned",4]],[[],["expression",4]],[[],["constraintsystem",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[["constraintsystem",3]]],[[["usize",15],["column",3,["any"]],["any",4]],[["result",4,["error"]],["error",4]]],[[["str",15]]],[[["provingkey",3],["params",3]],[["result",4,["error"]],["error",4]]],[[],["constraintsystem",3]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["region",3]],[["result",4,["error"]],["error",4]]],[[["fixed",3],["column",3,["fixed"]]]],[[["column",3,["any"]],["any",4]]],[[["usize",15],["selector",3]],[["result",4,["error"]],["error",4]]],[[]],[[["column",3]],["bool",15]],[[["advice",3]],["bool",15]],[[["fixed",3]],["bool",15]],[[["instance",3]],["bool",15]],[[["any",4]],["bool",15]],[[["selector",3]],["bool",15]],[[["error",4]],["bool",15]],[[]],[[]],[[]],[[],[["fixed",3],["column",3,["fixed"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["fixed",3],["column",3,["fixed"]]],[["column",3,["any"]],["any",4]]],[[["column",3,["advice"]],["advice",3]],[["column",3,["any"]],["any",4]]],[[["column",3,["instance"]],["instance",3]],[["column",3,["any"]],["any",4]]],[[]],[[]],[[]],[[["fixed",3]],["any",4]],[[["instance",3]],["any",4]],[[["advice",3]],["any",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expression",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["evaluationdomain",3]],[[],["verifyingkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["column",3,["instance"]],["instance",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["verifyingkey",3],["params",3]],[["provingkey",3],["result",4,["provingkey","error"]],["error",4]]],[[["params",3]],[["result",4,["verifyingkey","error"]],["verifyingkey",3],["error",4]]],[[],["usize",15]],[[],["usize",15]],[[],["assigned",4]],[[["assigned",4]],["assigned",4]],[[["expression",4]],["expression",4]],[[],["expression",4]],[[["column",3]],["bool",15]],[[["selector",3]],["bool",15]],[[]],[[]],[[]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["pinnedconstraintsystem",3]],[[],["pinnedverificationkey",3]],[[["option",4,["string"]],["string",3]]],[[]],[[["column",3,["advice"]],["advice",3],["rotation",3]],["expression",4]],[[["column",3,["any"]],["any",4],["rotation",3]],["expression",4]],[[["fixed",3],["rotation",3],["column",3,["fixed"]]],["expression",4]],[[["column",3,["instance"]],["usize",15],["instance",3]],[["result",4,["option","error"]],["option",4],["error",4]]],[[["column",3,["instance"]],["rotation",3],["instance",3]],["expression",4]],[[["selector",3]],["expression",4]],[[["params",3]],["result",6]],[[],["selector",3]],[[["usize",15]]],[[]],[[],["assigned",4]],[[["assigned",4]],["assigned",4]],[[["expression",4]],["expression",4]],[[["vec",3,["column"]],["column",3,["fixed"]]],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["column",3,["any"]],["any",4]],["result",4]],[[["column",3,["any"]],["any",4]],["result",4]],[[["column",3,["any"]],["any",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["curveaffine",8],["params",3],["verifyingkey",3],["msm",3]],[["error",4],["result",4,["guard","error"]],["guard",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["polynomial",3]],["polynomial",3]],[[["polynomial",3],["rotation",3],["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coeff",3]],[[],["lagrangecoeff",3]],[[],["extendedlagrangecoeff",3]],[[],["polynomial",3]],[[],["rotation",3]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],[["coeff",3],["polynomial",3,["coeff"]]]],[[["coeff",3],["polynomial",3,["coeff"]]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],null,[[],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[],[["lagrangecoeff",3],["polynomial",3,["lagrangecoeff"]]]],[[],["rotation",3]],[[],["rotation",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["coeff",3],["polynomial",3,["coeff"]]]],[[],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[],[["lagrangecoeff",3],["polynomial",3,["lagrangecoeff"]]]],[[["rotation",3]],["bool",15]],[[],["usize",15]],[[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["rangefull",3]]],[[["usize",15],["rangefrom",3,["usize"]]]],[[["rangefull",3]]],[[["usize",15],["rangefrom",3,["usize"]]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["clone",8],["intoiterator",8]],["vec",3]],[[["vec",3]],[["lagrangecoeff",3],["polynomial",3,["lagrangecoeff"]]]],[[["lagrangecoeff",3],["polynomial",3,["lagrangecoeff"]]],[["coeff",3],["polynomial",3,["coeff"]]]],[[],["polynomial",3]],[[["polynomial",3]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[["polynomial",3],["rotation",3],["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],null,[[["rotation",3]],["bool",15]],[[["u32",15]]],[[],["rotation",3]],[[],["usize",15]],[[]],[[],["pinnedevaluationdomain",3]],[[],["rotation",3]],[[["rotation",3]],[["lagrangecoeff",3],["polynomial",3,["lagrangecoeff"]]]],[[["polynomial",3],["rotation",3]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[["rotation",3]]],[[["polynomial",3]],["polynomial",3]],[[["polynomial",3],["rotation",3],["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]],[["polynomial",3,["extendedlagrangecoeff"]],["extendedlagrangecoeff",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["blind",3]]],[[["blind",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["msm",3]],[[],["guard",3]],[[],["accumulator",3]],[[],["blind",3]],[[]],[[]],[[]],[[]],[[["polynomial",3],["blind",3]]],[[["blind",3],["polynomial",3]]],[[]],[[["polynomial",3],["blind",3],["params",3]],["result",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["msm",3]],[[["blind",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,[[],["vec",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["blind",3]]],[[["blind",3]]],[[]],[[["blind",3]],["bool",15]],[[["params",3]]],[[["u32",15]]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["msm",3]],[[]],[[["params",3],["msm",3],["curveaffine",8]],[["error",4],["result",4,["guard","error"]],["guard",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],null,null,null,[[]],[[]],[[]],[[]],[[],["proverquery",3]],[[],["verifierquery",3]],[[]],[[]],[[["params",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["msm",3]]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["params",3],["curveaffine",8],["msm",3]],[["result",4,["guard","error"]],["error",4],["guard",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["challengescalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blake2bread",3]],[[],["blake2bwrite",3]],[[],["challengescalar",3]],[[],["challenge255",3]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[],["challenge255",3]],[[],["challenge255",3]],[[],["challengescalar",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]]],"p":[[8,"CurveExt"],[8,"CurveAffine"],[8,"FieldExt"],[8,"Group"],[8,"BatchInvert"],[3,"Coordinates"],[3,"SqrtTables"],[8,"Field"],[8,"Chip"],[8,"Layouter"],[3,"Region"],[3,"NamespacedLayouter"],[3,"SimpleFloorPlanner"],[3,"RegionIndex"],[3,"RegionStart"],[3,"Cell"],[3,"V1Pass"],[3,"V1"],[8,"RegionLayouter"],[3,"RegionShape"],[4,"VerifyFailure"],[3,"MockProver"],[13,"Cell"],[13,"Permutation"],[13,"ConstraintNotSatisfied"],[13,"ConstraintPoisoned"],[13,"Lookup"],[3,"CircuitCost"],[3,"ProofSize"],[3,"Column"],[3,"Gate"],[3,"Constraint"],[3,"Region"],[4,"Any"],[4,"Expression"],[4,"Error"],[8,"Circuit"],[4,"Assigned"],[3,"ConstraintSystem"],[8,"Assignment"],[3,"Column"],[3,"Advice"],[3,"Fixed"],[3,"Instance"],[3,"Selector"],[3,"Constraint"],[3,"PinnedConstraintSystem"],[3,"VirtualCells"],[3,"VerifyingKey"],[3,"PinnedVerificationKey"],[3,"ProvingKey"],[8,"FloorPlanner"],[13,"Fixed"],[13,"Advice"],[13,"Instance"],[3,"Rotation"],[4,"Error"],[3,"Polynomial"],[3,"EvaluationDomain"],[3,"PinnedEvaluationDomain"],[3,"Coeff"],[3,"LagrangeCoeff"],[3,"ExtendedLagrangeCoeff"],[3,"Blind"],[3,"MSM"],[3,"Guard"],[3,"Accumulator"],[3,"Params"],[3,"ProverQuery"],[3,"VerifierQuery"],[8,"EncodedChallenge"],[3,"Blake2bRead"],[3,"Blake2bWrite"],[3,"ChallengeScalar"],[3,"Challenge255"],[8,"Transcript"],[8,"TranscriptRead"],[8,"TranscriptWrite"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};